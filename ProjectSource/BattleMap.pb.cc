// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BattleTech_GameBoard {

namespace {

const ::google::protobuf::Descriptor* MapHex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapHex_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MapHex_HexType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapHex_FlipType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapColumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleField_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleMap_2eproto() {
  protobuf_AddDesc_BattleMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleMap.proto");
  GOOGLE_CHECK(file != NULL);
  MapHex_descriptor_ = file->message_type(0);
  static const int MapHex_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHex, baseimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHex, terraindetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHex, objectimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHex, terrain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHex, hexelevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHex, terrainflip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHex, objectflip_),
  };
  MapHex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapHex_descriptor_,
      MapHex::default_instance_,
      MapHex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapHex));
  MapHex_HexType_descriptor_ = MapHex_descriptor_->enum_type(0);
  MapHex_FlipType_descriptor_ = MapHex_descriptor_->enum_type(1);
  MapColumn_descriptor_ = file->message_type(1);
  static const int MapColumn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapColumn, hexcolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapColumn, hexcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapColumn, columnindent_),
  };
  MapColumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapColumn_descriptor_,
      MapColumn::default_instance_,
      MapColumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapColumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapColumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapColumn));
  BattleField_descriptor_ = file->message_type(2);
  static const int BattleField_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, columnlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, columntotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, rowtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, maptotal_),
  };
  BattleField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleField_descriptor_,
      BattleField::default_instance_,
      BattleField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleField));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapHex_descriptor_, &MapHex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapColumn_descriptor_, &MapColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleField_descriptor_, &BattleField::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleMap_2eproto() {
  delete MapHex::default_instance_;
  delete MapHex_reflection_;
  delete MapColumn::default_instance_;
  delete MapColumn_reflection_;
  delete BattleField::default_instance_;
  delete BattleField_reflection_;
}

void protobuf_AddDesc_BattleMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017BattleMap.proto\022\024BattleTech_GameBoard\""
    "\273\003\n\006MapHex\022\021\n\tBaseImage\030\001 \002(\005\022\025\n\rTerrain"
    "Detail\030\002 \001(\005\022\023\n\013ObjectImage\030\003 \001(\005\022<\n\007Ter"
    "rain\030\004 \001(\0162$.BattleTech_GameBoard.MapHex"
    ".HexType:\005EMPTY\022\024\n\014HexElevation\030\005 \001(\005\022@\n"
    "\013TerrainFlip\030\006 \001(\0162%.BattleTech_GameBoar"
    "d.MapHex.FlipType:\004NONE\022\?\n\nObjectFlip\030\007 "
    "\001(\0162%.BattleTech_GameBoard.MapHex.FlipTy"
    "pe:\004NONE\"V\n\007HexType\022\t\n\005EMPTY\020\000\022\t\n\005WATER\020"
    "\001\022\r\n\tLGTFOREST\020\002\022\r\n\tHVYFOREST\020\003\022\t\n\005ROUGH"
    "\020\004\022\014\n\010BUILDING\020\005\"C\n\010FlipType\022\010\n\004NONE\020\000\022\016"
    "\n\nHORIZONTAL\020\001\022\014\n\010VIRTICAL\020\002\022\017\n\013HOR_AND_"
    "VIR\020\003\"d\n\tMapColumn\022/\n\tHexColumn\030\001 \003(\0132\034."
    "BattleTech_GameBoard.MapHex\022\020\n\010HexCount\030"
    "\002 \001(\005\022\024\n\014ColumnIndent\030\003 \001(\010\"{\n\013BattleFie"
    "ld\0223\n\nColumnList\030\001 \003(\0132\037.BattleTech_Game"
    "Board.MapColumn\022\023\n\013ColumnTotal\030\002 \001(\005\022\020\n\010"
    "RowTotal\030\003 \001(\005\022\020\n\010MapTotal\030\004 \001(\005", 712);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleMap.proto", &protobuf_RegisterTypes);
  MapHex::default_instance_ = new MapHex();
  MapColumn::default_instance_ = new MapColumn();
  BattleField::default_instance_ = new BattleField();
  MapHex::default_instance_->InitAsDefaultInstance();
  MapColumn::default_instance_->InitAsDefaultInstance();
  BattleField::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleMap_2eproto {
  StaticDescriptorInitializer_BattleMap_2eproto() {
    protobuf_AddDesc_BattleMap_2eproto();
  }
} static_descriptor_initializer_BattleMap_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MapHex_HexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapHex_HexType_descriptor_;
}
bool MapHex_HexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapHex_HexType MapHex::EMPTY;
const MapHex_HexType MapHex::WATER;
const MapHex_HexType MapHex::LGTFOREST;
const MapHex_HexType MapHex::HVYFOREST;
const MapHex_HexType MapHex::ROUGH;
const MapHex_HexType MapHex::BUILDING;
const MapHex_HexType MapHex::HexType_MIN;
const MapHex_HexType MapHex::HexType_MAX;
const int MapHex::HexType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MapHex_FlipType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapHex_FlipType_descriptor_;
}
bool MapHex_FlipType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapHex_FlipType MapHex::NONE;
const MapHex_FlipType MapHex::HORIZONTAL;
const MapHex_FlipType MapHex::VIRTICAL;
const MapHex_FlipType MapHex::HOR_AND_VIR;
const MapHex_FlipType MapHex::FlipType_MIN;
const MapHex_FlipType MapHex::FlipType_MAX;
const int MapHex::FlipType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MapHex::kBaseImageFieldNumber;
const int MapHex::kTerrainDetailFieldNumber;
const int MapHex::kObjectImageFieldNumber;
const int MapHex::kTerrainFieldNumber;
const int MapHex::kHexElevationFieldNumber;
const int MapHex::kTerrainFlipFieldNumber;
const int MapHex::kObjectFlipFieldNumber;
#endif  // !_MSC_VER

MapHex::MapHex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BattleTech_GameBoard.MapHex)
}

void MapHex::InitAsDefaultInstance() {
}

MapHex::MapHex(const MapHex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BattleTech_GameBoard.MapHex)
}

void MapHex::SharedCtor() {
  _cached_size_ = 0;
  baseimage_ = 0;
  terraindetail_ = 0;
  objectimage_ = 0;
  terrain_ = 0;
  hexelevation_ = 0;
  terrainflip_ = 0;
  objectflip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapHex::~MapHex() {
  // @@protoc_insertion_point(destructor:BattleTech_GameBoard.MapHex)
  SharedDtor();
}

void MapHex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapHex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapHex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapHex_descriptor_;
}

const MapHex& MapHex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleMap_2eproto();
  return *default_instance_;
}

MapHex* MapHex::default_instance_ = NULL;

MapHex* MapHex::New() const {
  return new MapHex;
}

void MapHex::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapHex*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(baseimage_, objectflip_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapHex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BattleTech_GameBoard.MapHex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BaseImage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseimage_)));
          set_has_baseimage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TerrainDetail;
        break;
      }

      // optional int32 TerrainDetail = 2;
      case 2: {
        if (tag == 16) {
         parse_TerrainDetail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terraindetail_)));
          set_has_terraindetail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ObjectImage;
        break;
      }

      // optional int32 ObjectImage = 3;
      case 3: {
        if (tag == 24) {
         parse_ObjectImage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectimage_)));
          set_has_objectimage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Terrain;
        break;
      }

      // optional .BattleTech_GameBoard.MapHex.HexType Terrain = 4 [default = EMPTY];
      case 4: {
        if (tag == 32) {
         parse_Terrain:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BattleTech_GameBoard::MapHex_HexType_IsValid(value)) {
            set_terrain(static_cast< ::BattleTech_GameBoard::MapHex_HexType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_HexElevation;
        break;
      }

      // optional int32 HexElevation = 5;
      case 5: {
        if (tag == 40) {
         parse_HexElevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hexelevation_)));
          set_has_hexelevation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TerrainFlip;
        break;
      }

      // optional .BattleTech_GameBoard.MapHex.FlipType TerrainFlip = 6 [default = NONE];
      case 6: {
        if (tag == 48) {
         parse_TerrainFlip:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BattleTech_GameBoard::MapHex_FlipType_IsValid(value)) {
            set_terrainflip(static_cast< ::BattleTech_GameBoard::MapHex_FlipType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ObjectFlip;
        break;
      }

      // optional .BattleTech_GameBoard.MapHex.FlipType ObjectFlip = 7 [default = NONE];
      case 7: {
        if (tag == 56) {
         parse_ObjectFlip:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BattleTech_GameBoard::MapHex_FlipType_IsValid(value)) {
            set_objectflip(static_cast< ::BattleTech_GameBoard::MapHex_FlipType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BattleTech_GameBoard.MapHex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BattleTech_GameBoard.MapHex)
  return false;
#undef DO_
}

void MapHex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BattleTech_GameBoard.MapHex)
  // required int32 BaseImage = 1;
  if (has_baseimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->baseimage(), output);
  }

  // optional int32 TerrainDetail = 2;
  if (has_terraindetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->terraindetail(), output);
  }

  // optional int32 ObjectImage = 3;
  if (has_objectimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectimage(), output);
  }

  // optional .BattleTech_GameBoard.MapHex.HexType Terrain = 4 [default = EMPTY];
  if (has_terrain()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->terrain(), output);
  }

  // optional int32 HexElevation = 5;
  if (has_hexelevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hexelevation(), output);
  }

  // optional .BattleTech_GameBoard.MapHex.FlipType TerrainFlip = 6 [default = NONE];
  if (has_terrainflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->terrainflip(), output);
  }

  // optional .BattleTech_GameBoard.MapHex.FlipType ObjectFlip = 7 [default = NONE];
  if (has_objectflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->objectflip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BattleTech_GameBoard.MapHex)
}

::google::protobuf::uint8* MapHex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleTech_GameBoard.MapHex)
  // required int32 BaseImage = 1;
  if (has_baseimage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->baseimage(), target);
  }

  // optional int32 TerrainDetail = 2;
  if (has_terraindetail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->terraindetail(), target);
  }

  // optional int32 ObjectImage = 3;
  if (has_objectimage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objectimage(), target);
  }

  // optional .BattleTech_GameBoard.MapHex.HexType Terrain = 4 [default = EMPTY];
  if (has_terrain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->terrain(), target);
  }

  // optional int32 HexElevation = 5;
  if (has_hexelevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hexelevation(), target);
  }

  // optional .BattleTech_GameBoard.MapHex.FlipType TerrainFlip = 6 [default = NONE];
  if (has_terrainflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->terrainflip(), target);
  }

  // optional .BattleTech_GameBoard.MapHex.FlipType ObjectFlip = 7 [default = NONE];
  if (has_objectflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->objectflip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleTech_GameBoard.MapHex)
  return target;
}

int MapHex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BaseImage = 1;
    if (has_baseimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseimage());
    }

    // optional int32 TerrainDetail = 2;
    if (has_terraindetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->terraindetail());
    }

    // optional int32 ObjectImage = 3;
    if (has_objectimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectimage());
    }

    // optional .BattleTech_GameBoard.MapHex.HexType Terrain = 4 [default = EMPTY];
    if (has_terrain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->terrain());
    }

    // optional int32 HexElevation = 5;
    if (has_hexelevation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hexelevation());
    }

    // optional .BattleTech_GameBoard.MapHex.FlipType TerrainFlip = 6 [default = NONE];
    if (has_terrainflip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->terrainflip());
    }

    // optional .BattleTech_GameBoard.MapHex.FlipType ObjectFlip = 7 [default = NONE];
    if (has_objectflip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->objectflip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapHex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapHex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapHex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapHex::MergeFrom(const MapHex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseimage()) {
      set_baseimage(from.baseimage());
    }
    if (from.has_terraindetail()) {
      set_terraindetail(from.terraindetail());
    }
    if (from.has_objectimage()) {
      set_objectimage(from.objectimage());
    }
    if (from.has_terrain()) {
      set_terrain(from.terrain());
    }
    if (from.has_hexelevation()) {
      set_hexelevation(from.hexelevation());
    }
    if (from.has_terrainflip()) {
      set_terrainflip(from.terrainflip());
    }
    if (from.has_objectflip()) {
      set_objectflip(from.objectflip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapHex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapHex::CopyFrom(const MapHex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapHex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MapHex::Swap(MapHex* other) {
  if (other != this) {
    std::swap(baseimage_, other->baseimage_);
    std::swap(terraindetail_, other->terraindetail_);
    std::swap(objectimage_, other->objectimage_);
    std::swap(terrain_, other->terrain_);
    std::swap(hexelevation_, other->hexelevation_);
    std::swap(terrainflip_, other->terrainflip_);
    std::swap(objectflip_, other->objectflip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapHex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapHex_descriptor_;
  metadata.reflection = MapHex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapColumn::kHexColumnFieldNumber;
const int MapColumn::kHexCountFieldNumber;
const int MapColumn::kColumnIndentFieldNumber;
#endif  // !_MSC_VER

MapColumn::MapColumn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BattleTech_GameBoard.MapColumn)
}

void MapColumn::InitAsDefaultInstance() {
}

MapColumn::MapColumn(const MapColumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BattleTech_GameBoard.MapColumn)
}

void MapColumn::SharedCtor() {
  _cached_size_ = 0;
  hexcount_ = 0;
  columnindent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapColumn::~MapColumn() {
  // @@protoc_insertion_point(destructor:BattleTech_GameBoard.MapColumn)
  SharedDtor();
}

void MapColumn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapColumn_descriptor_;
}

const MapColumn& MapColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleMap_2eproto();
  return *default_instance_;
}

MapColumn* MapColumn::default_instance_ = NULL;

MapColumn* MapColumn::New() const {
  return new MapColumn;
}

void MapColumn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapColumn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hexcount_, columnindent_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hexcolumn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BattleTech_GameBoard.MapColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BattleTech_GameBoard.MapHex HexColumn = 1;
      case 1: {
        if (tag == 10) {
         parse_HexColumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hexcolumn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_HexColumn;
        if (input->ExpectTag(16)) goto parse_HexCount;
        break;
      }

      // optional int32 HexCount = 2;
      case 2: {
        if (tag == 16) {
         parse_HexCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hexcount_)));
          set_has_hexcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ColumnIndent;
        break;
      }

      // optional bool ColumnIndent = 3;
      case 3: {
        if (tag == 24) {
         parse_ColumnIndent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &columnindent_)));
          set_has_columnindent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BattleTech_GameBoard.MapColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BattleTech_GameBoard.MapColumn)
  return false;
#undef DO_
}

void MapColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BattleTech_GameBoard.MapColumn)
  // repeated .BattleTech_GameBoard.MapHex HexColumn = 1;
  for (int i = 0; i < this->hexcolumn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hexcolumn(i), output);
  }

  // optional int32 HexCount = 2;
  if (has_hexcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hexcount(), output);
  }

  // optional bool ColumnIndent = 3;
  if (has_columnindent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->columnindent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BattleTech_GameBoard.MapColumn)
}

::google::protobuf::uint8* MapColumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleTech_GameBoard.MapColumn)
  // repeated .BattleTech_GameBoard.MapHex HexColumn = 1;
  for (int i = 0; i < this->hexcolumn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hexcolumn(i), target);
  }

  // optional int32 HexCount = 2;
  if (has_hexcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hexcount(), target);
  }

  // optional bool ColumnIndent = 3;
  if (has_columnindent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->columnindent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleTech_GameBoard.MapColumn)
  return target;
}

int MapColumn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 HexCount = 2;
    if (has_hexcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hexcount());
    }

    // optional bool ColumnIndent = 3;
    if (has_columnindent()) {
      total_size += 1 + 1;
    }

  }
  // repeated .BattleTech_GameBoard.MapHex HexColumn = 1;
  total_size += 1 * this->hexcolumn_size();
  for (int i = 0; i < this->hexcolumn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hexcolumn(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapColumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapColumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapColumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapColumn::MergeFrom(const MapColumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  hexcolumn_.MergeFrom(from.hexcolumn_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hexcount()) {
      set_hexcount(from.hexcount());
    }
    if (from.has_columnindent()) {
      set_columnindent(from.columnindent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapColumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapColumn::CopyFrom(const MapColumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapColumn::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->hexcolumn())) return false;
  return true;
}

void MapColumn::Swap(MapColumn* other) {
  if (other != this) {
    hexcolumn_.Swap(&other->hexcolumn_);
    std::swap(hexcount_, other->hexcount_);
    std::swap(columnindent_, other->columnindent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapColumn_descriptor_;
  metadata.reflection = MapColumn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleField::kColumnListFieldNumber;
const int BattleField::kColumnTotalFieldNumber;
const int BattleField::kRowTotalFieldNumber;
const int BattleField::kMapTotalFieldNumber;
#endif  // !_MSC_VER

BattleField::BattleField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BattleTech_GameBoard.BattleField)
}

void BattleField::InitAsDefaultInstance() {
}

BattleField::BattleField(const BattleField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BattleTech_GameBoard.BattleField)
}

void BattleField::SharedCtor() {
  _cached_size_ = 0;
  columntotal_ = 0;
  rowtotal_ = 0;
  maptotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleField::~BattleField() {
  // @@protoc_insertion_point(destructor:BattleTech_GameBoard.BattleField)
  SharedDtor();
}

void BattleField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleField_descriptor_;
}

const BattleField& BattleField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleMap_2eproto();
  return *default_instance_;
}

BattleField* BattleField::default_instance_ = NULL;

BattleField* BattleField::New() const {
  return new BattleField;
}

void BattleField::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleField*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(columntotal_, maptotal_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  columnlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BattleTech_GameBoard.BattleField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BattleTech_GameBoard.MapColumn ColumnList = 1;
      case 1: {
        if (tag == 10) {
         parse_ColumnList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columnlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ColumnList;
        if (input->ExpectTag(16)) goto parse_ColumnTotal;
        break;
      }

      // optional int32 ColumnTotal = 2;
      case 2: {
        if (tag == 16) {
         parse_ColumnTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columntotal_)));
          set_has_columntotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RowTotal;
        break;
      }

      // optional int32 RowTotal = 3;
      case 3: {
        if (tag == 24) {
         parse_RowTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rowtotal_)));
          set_has_rowtotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MapTotal;
        break;
      }

      // optional int32 MapTotal = 4;
      case 4: {
        if (tag == 32) {
         parse_MapTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maptotal_)));
          set_has_maptotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BattleTech_GameBoard.BattleField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BattleTech_GameBoard.BattleField)
  return false;
#undef DO_
}

void BattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BattleTech_GameBoard.BattleField)
  // repeated .BattleTech_GameBoard.MapColumn ColumnList = 1;
  for (int i = 0; i < this->columnlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columnlist(i), output);
  }

  // optional int32 ColumnTotal = 2;
  if (has_columntotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->columntotal(), output);
  }

  // optional int32 RowTotal = 3;
  if (has_rowtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rowtotal(), output);
  }

  // optional int32 MapTotal = 4;
  if (has_maptotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maptotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BattleTech_GameBoard.BattleField)
}

::google::protobuf::uint8* BattleField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleTech_GameBoard.BattleField)
  // repeated .BattleTech_GameBoard.MapColumn ColumnList = 1;
  for (int i = 0; i < this->columnlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columnlist(i), target);
  }

  // optional int32 ColumnTotal = 2;
  if (has_columntotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->columntotal(), target);
  }

  // optional int32 RowTotal = 3;
  if (has_rowtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rowtotal(), target);
  }

  // optional int32 MapTotal = 4;
  if (has_maptotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maptotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleTech_GameBoard.BattleField)
  return target;
}

int BattleField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 ColumnTotal = 2;
    if (has_columntotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->columntotal());
    }

    // optional int32 RowTotal = 3;
    if (has_rowtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rowtotal());
    }

    // optional int32 MapTotal = 4;
    if (has_maptotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maptotal());
    }

  }
  // repeated .BattleTech_GameBoard.MapColumn ColumnList = 1;
  total_size += 1 * this->columnlist_size();
  for (int i = 0; i < this->columnlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columnlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleField::MergeFrom(const BattleField& from) {
  GOOGLE_CHECK_NE(&from, this);
  columnlist_.MergeFrom(from.columnlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_columntotal()) {
      set_columntotal(from.columntotal());
    }
    if (from.has_rowtotal()) {
      set_rowtotal(from.rowtotal());
    }
    if (from.has_maptotal()) {
      set_maptotal(from.maptotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleField::CopyFrom(const BattleField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleField::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->columnlist())) return false;
  return true;
}

void BattleField::Swap(BattleField* other) {
  if (other != this) {
    columnlist_.Swap(&other->columnlist_);
    std::swap(columntotal_, other->columntotal_);
    std::swap(rowtotal_, other->rowtotal_);
    std::swap(maptotal_, other->maptotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleField_descriptor_;
  metadata.reflection = BattleField_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BattleTech_GameBoard

// @@protoc_insertion_point(global_scope)
